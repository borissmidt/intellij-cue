/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package dev.monogon.cue.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.IntStack;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.monogon.cue.lang.CueTypes.*;
import static dev.monogon.cue.lang.CueTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/jansorg/self-employment/customers/nexenta-cuelang/intellij-cue/src/grammar/cue.flex</tt>
 */
public class _CueLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_LITERAL = 2;
  public static final int STRING_MULTILINE = 4;
  public static final int BYTE_LITERAL = 6;
  public static final int BYTES_MULTILINE = 8;
  public static final int INTERPOLATION = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14272 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35\1"+
    "\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1\1"+
    "\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1"+
    "\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1\127"+
    "\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135"+
    "\2\12\1\137\1\140\1\13\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\141\1\24\45"+
    "\12\1\142\1\12\1\24\1\27\4\12\1\27\1\143\1\144\1\15\1\12\1\15\1\12\1\15\1"+
    "\144\1\70\3\12\1\145\1\1\1\146\1\114\2\1\1\114\5\12\1\26\1\147\1\12\1\150"+
    "\4\12\1\37\1\12\1\151\2\1\1\64\1\12\1\152\1\153\2\12\1\154\1\12\1\76\1\114"+
    "\2\1\1\12\1\112\3\12\1\153\2\1\2\114\1\155\5\1\1\107\2\12\1\145\1\156\1\114"+
    "\2\1\1\157\1\12\1\160\1\41\2\12\1\37\1\1\2\12\1\145\1\1\1\161\1\41\1\12\1"+
    "\152\1\45\5\1\1\162\1\163\14\12\4\1\21\12\1\141\2\12\1\141\1\164\1\12\1\152"+
    "\3\12\1\165\1\166\1\167\1\124\1\166\7\1\1\170\1\1\1\124\6\1\1\171\1\172\1"+
    "\173\1\174\1\175\3\1\1\176\147\1\2\12\1\151\2\12\1\151\10\12\1\177\1\200\2"+
    "\12\1\133\3\12\1\201\1\1\1\12\1\112\4\202\4\1\1\126\35\1\1\203\2\1\1\204\1"+
    "\24\4\12\1\205\1\24\4\12\1\134\1\107\1\12\1\152\1\24\4\12\1\151\1\1\1\12\1"+
    "\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\124\4\1\2\12\1\152"+
    "\20\12\1\124\1\12\1\206\1\1\2\12\1\151\1\126\1\12\1\152\4\12\1\37\2\1\1\207"+
    "\1\210\5\12\1\211\1\12\1\151\1\26\3\1\1\207\1\212\1\12\1\30\1\1\3\12\1\145"+
    "\1\210\2\12\1\145\1\1\1\114\1\1\1\213\1\41\1\12\1\37\1\12\1\112\1\1\1\12\1"+
    "\124\1\47\2\12\1\30\1\126\1\114\1\214\1\215\2\12\1\45\1\1\1\216\1\114\1\12"+
    "\1\217\3\12\1\220\1\221\1\222\1\27\1\65\1\223\1\224\1\202\2\12\1\134\1\37"+
    "\7\12\1\30\1\114\72\12\1\145\1\12\1\225\2\12\1\154\20\1\26\12\1\152\6\12\1"+
    "\76\2\1\1\112\1\226\1\55\1\227\1\230\6\12\1\15\1\1\1\157\25\12\1\152\1\1\4"+
    "\12\1\210\2\12\1\26\2\1\1\154\7\1\1\214\7\12\1\124\1\1\1\114\1\24\1\27\1\24"+
    "\1\27\1\231\4\12\1\151\1\232\1\233\2\1\1\234\1\12\1\13\1\235\2\152\2\1\7\12"+
    "\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2\12\1\1\1\12\1\236\2\12\1\37\1\12\1\152"+
    "\2\12\1\237\3\1\11\12\1\152\1\114\2\12\1\237\1\12\1\154\2\12\1\26\3\12\1\145"+
    "\11\1\23\12\1\112\1\12\1\37\1\26\11\1\1\240\2\12\1\241\1\12\1\37\1\12\1\112"+
    "\1\12\1\151\4\1\1\12\1\242\1\12\1\37\1\12\1\76\4\1\3\12\1\243\4\1\1\70\1\244"+
    "\1\12\1\145\2\1\1\12\1\124\1\12\1\124\2\1\1\123\1\12\1\153\1\1\3\12\1\37\1"+
    "\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1"+
    "\157\2\12\1\26\2\1\1\64\1\1\1\157\2\12\2\1\1\12\1\45\1\114\1\157\1\12\1\112"+
    "\1\64\1\1\2\12\1\245\1\157\2\12\1\30\1\246\1\247\2\1\1\12\1\21\1\154\5\1\1"+
    "\250\1\251\1\45\2\12\1\151\1\1\1\114\1\72\1\54\1\55\1\67\1\1\1\252\1\15\11"+
    "\1\3\12\1\153\1\253\1\114\2\1\3\12\1\1\1\254\1\114\12\1\2\12\1\151\2\1\1\255"+
    "\2\1\3\12\1\1\1\256\1\114\2\1\2\12\1\27\1\1\1\114\3\1\1\12\1\76\1\1\1\114"+
    "\26\1\4\12\1\114\1\126\34\1\3\12\1\45\20\1\1\55\1\12\1\151\1\1\1\70\1\114"+
    "\1\1\1\210\1\12\67\1\71\12\1\76\16\1\14\12\1\145\53\1\2\12\1\151\75\1\44\12"+
    "\1\112\33\1\43\12\1\45\1\12\1\151\1\114\6\1\1\12\1\152\1\1\3\12\1\1\1\145"+
    "\1\114\1\157\1\257\1\12\67\1\4\12\1\153\1\70\3\1\1\157\4\1\1\70\1\1\76\12"+
    "\1\124\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\124\1\45\1\76\66\1\5\12\1"+
    "\214\3\12\1\144\1\260\1\261\1\262\3\12\1\263\1\264\1\12\1\265\1\266\1\35\24"+
    "\12\1\267\1\12\1\35\1\134\1\12\1\134\1\12\1\214\1\12\1\214\1\151\1\12\1\151"+
    "\1\12\1\55\1\12\1\55\1\12\1\270\3\271\14\12\1\153\3\1\4\12\1\145\1\114\112"+
    "\1\1\262\1\12\1\272\1\273\1\274\1\275\1\276\1\277\1\300\1\154\1\301\1\154"+
    "\24\1\55\12\1\112\2\1\103\12\1\153\15\12\1\152\150\12\1\15\25\1\41\12\1\152"+
    "\36\1");

  /* The ZZ_CMAP_A table has 3104 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\65\1\36\1\13\2\0\1\73\1\37\1\34\1\35\1\70"+
    "\1\24\1\12\1\24\1\15\1\26\1\14\1\11\1\100\1\77\1\101\1\7\1\76\1\7\1\75\1\6"+
    "\1\57\1\0\1\66\1\60\1\66\1\61\1\62\4\10\1\23\1\10\1\21\3\3\1\21\1\3\1\21\2"+
    "\3\1\21\3\3\1\21\1\33\2\3\1\17\2\3\1\63\1\25\1\64\1\0\1\5\1\0\1\41\1\16\1"+
    "\42\1\71\1\45\1\30\1\44\1\3\1\22\1\3\1\43\1\52\1\46\1\51\1\20\1\40\1\72\1"+
    "\47\1\53\1\50\1\32\1\27\1\3\1\31\1\74\1\3\1\55\1\54\1\56\1\67\13\0\1\3\12"+
    "\0\1\3\4\0\1\3\5\0\27\3\1\0\12\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0\1\3\1\0\5\3"+
    "\1\0\2\3\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0\1\3\1\0\4\3\1\0\23\3\1\0\13\3"+
    "\10\0\6\3\1\0\26\3\2\0\1\3\6\0\10\3\10\0\13\3\5\0\3\3\15\0\12\4\4\0\6\3\1"+
    "\0\1\3\17\0\2\3\7\0\2\3\12\4\3\3\2\0\2\3\1\0\16\3\15\0\11\3\13\0\1\3\16\0"+
    "\12\4\6\3\4\0\2\3\4\0\1\3\5\0\6\3\4\0\1\3\11\0\1\3\3\0\1\3\7\0\11\3\7\0\5"+
    "\3\1\0\10\3\6\0\26\3\3\0\1\3\2\0\1\3\7\0\12\3\4\0\12\4\1\3\4\0\10\3\2\0\2"+
    "\3\2\0\26\3\1\0\7\3\1\0\1\3\3\0\4\3\3\0\1\3\20\0\1\3\15\0\2\3\1\0\1\3\5\0"+
    "\6\3\4\0\2\3\1\0\2\3\1\0\2\3\1\0\2\3\17\0\4\3\1\0\1\3\7\0\12\4\2\0\3\3\20"+
    "\0\11\3\1\0\2\3\1\0\2\3\1\0\5\3\3\0\1\3\2\0\1\3\30\0\1\3\13\0\10\3\2\0\1\3"+
    "\3\0\1\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3"+
    "\0\14\3\13\0\10\3\1\0\2\3\10\0\3\3\5\0\1\3\4\0\10\3\1\0\6\3\1\0\5\3\3\0\1"+
    "\3\3\0\2\3\15\0\13\3\2\0\1\3\6\0\3\3\10\0\1\3\12\0\6\3\5\0\22\3\3\0\10\3\1"+
    "\0\11\3\1\0\1\3\2\0\7\3\11\0\1\3\1\0\2\3\14\0\12\4\7\0\2\3\1\0\1\3\2\0\2\3"+
    "\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3\1"+
    "\0\2\3\11\0\1\3\2\0\5\3\1\0\1\3\11\0\12\4\2\0\14\3\1\0\24\3\13\0\5\3\22\0"+
    "\7\3\4\0\4\3\3\0\1\3\3\0\2\3\7\0\3\3\4\0\15\3\14\0\1\3\1\0\6\3\1\0\1\3\5\0"+
    "\1\3\2\0\13\3\1\0\15\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\1\3\1\0\4\3\2\0"+
    "\7\3\1\0\1\3\1\0\4\3\2\0\16\3\2\0\6\3\2\0\15\3\2\0\1\3\1\0\10\3\7\0\15\3\1"+
    "\0\6\3\23\0\1\3\4\0\1\3\3\0\5\3\2\0\22\3\1\0\1\3\5\0\17\3\1\0\16\3\2\0\5\3"+
    "\13\0\14\3\13\0\1\3\15\0\7\3\7\0\16\3\15\0\2\3\12\4\3\0\3\3\11\0\4\3\1\0\4"+
    "\3\3\0\2\3\11\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\6\3\1\0\7\3\1\0\1\3\3\0\3"+
    "\3\1\0\7\3\3\0\4\3\2\0\6\3\5\0\1\3\15\0\1\3\2\0\1\3\4\0\1\3\2\0\12\3\1\0\1"+
    "\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0\4\3\1\0\13\3\2\0\4\3\5\0\5\3\4\0\1"+
    "\3\4\0\2\3\13\0\5\3\6\0\4\3\3\0\2\3\14\0\10\3\7\0\10\3\1\0\7\3\6\0\2\3\12"+
    "\0\5\3\5\0\2\3\3\0\7\3\6\0\3\3\12\4\2\3\13\0\11\3\2\0\27\3\2\0\7\3\1\0\3\3"+
    "\1\0\4\3\1\0\4\3\2\0\6\3\3\0\1\3\1\0\1\3\2\0\5\3\1\0\12\3\12\4\5\3\1\0\3\3"+
    "\1\0\10\3\4\0\7\3\3\0\1\3\3\0\2\3\1\0\1\3\3\0\2\3\2\0\5\3\2\0\1\3\1\0\1\3"+
    "\30\0\3\3\3\0\6\3\2\0\6\3\2\0\6\3\11\0\7\3\4\0\5\3\3\0\5\3\5\0\1\3\1\0\10"+
    "\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\12\3\6\0\12\3\2\0\6\3\2\0\6\3\2\0\6"+
    "\3\2\0\3\3\3\0\14\3\1\0\16\3\1\0\2\3\1\0\2\3\1\0\10\3\6\0\4\3\4\0\16\3\2\0"+
    "\1\3\1\0\14\3\1\0\2\3\3\0\1\3\2\0\4\3\1\0\2\3\12\0\10\3\6\0\6\3\1\0\3\3\1"+
    "\0\12\3\3\0\1\3\12\0\4\3\13\0\12\4\1\3\1\0\1\3\3\0\7\3\1\0\1\3\1\0\4\3\1\0"+
    "\17\3\1\0\2\3\14\0\3\3\7\0\4\3\11\0\2\3\1\0\1\3\20\0\4\3\10\0\1\3\13\0\10"+
    "\3\5\0\3\3\2\0\1\3\2\0\2\3\2\0\4\3\1\0\14\3\1\0\1\3\1\0\7\3\1\0\21\3\1\0\4"+
    "\3\2\0\10\3\1\0\7\3\1\0\14\3\1\0\4\3\1\0\5\3\1\0\1\3\3\0\14\3\2\0\13\3\1\0"+
    "\10\3\2\0\22\4\1\0\2\3\1\0\1\3\2\0\1\3\1\0\12\3\1\0\4\3\1\0\1\3\1\0\1\3\6"+
    "\0\1\3\4\0\1\3\1\0\1\3\1\0\1\3\1\0\3\3\1\0\2\3\1\0\1\3\2\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\2\3\1\0\1\3\2\0\4\3\1\0\7\3\1\0\4\3\1\0\4\3\1\0\1"+
    "\3\1\0\12\3\1\0\5\3\1\0\3\3\1\0\5\3\1\0\5\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\2\4\1\5\1\6\1\1"+
    "\1\5\1\7\2\4\1\10\1\11\2\4\1\12\1\13"+
    "\1\14\1\15\7\4\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\11\2\4"+
    "\1\31\2\32\1\33\1\34\2\32\1\35\1\32\1\36"+
    "\3\0\1\37\1\5\6\0\1\37\1\0\2\4\1\40"+
    "\1\4\1\40\1\41\4\4\2\0\10\4\1\42\1\43"+
    "\1\30\2\4\1\44\3\0\1\45\4\0\1\46\1\5"+
    "\1\37\1\0\3\5\1\0\1\47\3\4\1\50\1\41"+
    "\3\4\2\0\1\4\1\11\4\4\1\50\1\4\2\0"+
    "\1\51\2\0\1\52\6\4\1\53\1\54\1\4\1\55"+
    "\1\4\1\56\1\4\2\0\1\57\2\4\1\50\3\4"+
    "\2\0\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u018c"+
    "\0\u018c\0\u01ce\0\u0210\0\u0252\0\u018c\0\u0294\0\u02d6\0\u0318"+
    "\0\u035a\0\u039c\0\u018c\0\u03de\0\u0420\0\u0462\0\u018c\0\u018c"+
    "\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672"+
    "\0\u06b4\0\u06f6\0\u018c\0\u018c\0\u018c\0\u0738\0\u018c\0\u018c"+
    "\0\u018c\0\u018c\0\u077a\0\u07bc\0\u018c\0\u07fe\0\u0840\0\u0882"+
    "\0\u018c\0\u08c4\0\u018c\0\u018c\0\u0906\0\u0948\0\u018c\0\u098a"+
    "\0\u018c\0\u0294\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u01ce\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4"+
    "\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104"+
    "\0\u1146\0\u1188\0\u018c\0\u018c\0\u018c\0\u11ca\0\u120c\0\u018c"+
    "\0\u124e\0\u1290\0\u12d2\0\u018c\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u018c\0\u018c\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566"+
    "\0\u018c\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u018c\0\u16b0\0\u16f2"+
    "\0\u0daa\0\u1734\0\u1776\0\u17b8\0\u01ce\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u01ce\0\u1902\0\u1944\0\u1986\0\u018c\0\u19c8\0\u1a0a"+
    "\0\u018c\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u018c"+
    "\0\u018c\0\u1bd8\0\u01ce\0\u1c1a\0\u01ce\0\u1c5c\0\u1c9e\0\u1ce0"+
    "\0\u018c\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae"+
    "\0\u1ef0\0\u1f32";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\7\1\13\2\14\1\12"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\3\12\1\22"+
    "\1\12\1\23\1\7\1\24\1\12\1\25\1\12\1\26"+
    "\1\12\1\27\1\30\1\31\1\32\1\33\5\12\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\7\1\55\1\56\1\57\1\60\1\12\5\14\2\61"+
    "\1\11\22\61\1\62\10\61\1\63\45\61\1\64\22\61"+
    "\1\62\10\61\1\65\45\61\1\11\22\61\1\66\11\61"+
    "\1\67\44\61\1\64\22\61\1\62\11\61\1\70\42\61"+
    "\1\7\1\10\1\11\1\12\1\7\1\13\2\14\1\12"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\3\12\1\22"+
    "\1\12\1\23\1\7\1\24\1\12\1\25\1\12\1\26"+
    "\1\12\1\27\1\71\1\31\1\32\1\33\5\12\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\7\1\55\1\56\1\57\1\60\1\12\5\14\105\0"+
    "\7\12\2\0\1\12\1\0\6\12\3\0\5\12\4\0"+
    "\14\12\15\0\2\12\1\0\6\12\3\0\7\12\1\0"+
    "\1\72\1\12\1\0\6\12\3\0\5\12\4\0\14\12"+
    "\1\73\14\0\2\12\1\0\6\12\5\0\1\74\2\14"+
    "\1\0\1\14\2\0\1\14\1\75\3\0\1\76\1\0"+
    "\1\77\21\0\1\77\27\0\5\14\3\0\1\12\1\0"+
    "\1\12\2\0\1\12\5\0\6\12\3\0\5\12\4\0"+
    "\14\12\15\0\2\12\1\0\1\12\12\0\1\100\2\101"+
    "\1\0\1\101\2\0\1\101\1\75\1\102\1\103\1\104"+
    "\1\76\1\0\1\77\5\0\1\103\13\0\1\77\27\0"+
    "\5\101\6\0\2\105\1\0\1\105\2\0\1\105\1\106"+
    "\57\0\5\105\3\0\7\12\2\0\1\12\1\0\2\12"+
    "\1\107\3\12\3\0\5\12\4\0\14\12\15\0\2\12"+
    "\1\0\1\110\5\12\3\0\7\12\2\0\1\12\1\0"+
    "\6\12\3\0\1\12\1\111\3\12\4\0\6\12\1\112"+
    "\2\12\1\113\2\12\15\0\2\12\1\0\6\12\26\0"+
    "\1\114\56\0\7\12\2\0\1\12\1\0\2\12\1\115"+
    "\3\12\3\0\5\12\4\0\1\12\1\116\10\12\1\117"+
    "\1\12\15\0\2\12\1\0\6\12\3\0\7\12\2\0"+
    "\1\12\1\0\4\12\1\120\1\12\3\0\5\12\4\0"+
    "\14\12\15\0\2\12\1\0\6\12\36\0\1\121\102\0"+
    "\1\122\45\0\7\12\2\0\1\12\1\0\6\12\3\0"+
    "\5\12\4\0\1\12\1\123\12\12\15\0\2\12\1\0"+
    "\6\12\3\0\7\12\2\0\1\12\1\0\2\12\1\124"+
    "\3\12\3\0\5\12\4\0\14\12\15\0\2\12\1\0"+
    "\6\12\3\0\7\12\2\0\1\12\1\0\6\12\3\0"+
    "\3\12\1\125\1\12\4\0\5\12\1\126\6\12\15\0"+
    "\2\12\1\0\6\12\3\0\7\12\2\0\1\12\1\0"+
    "\6\12\3\0\5\12\4\0\7\12\1\127\4\12\15\0"+
    "\2\12\1\0\6\12\3\0\7\12\2\0\1\12\1\0"+
    "\6\12\3\0\3\12\1\130\1\12\4\0\14\12\15\0"+
    "\2\12\1\0\6\12\3\0\7\12\2\0\1\12\1\0"+
    "\6\12\3\0\5\12\4\0\5\12\1\131\6\12\15\0"+
    "\2\12\1\0\6\12\3\0\7\12\2\0\1\12\1\0"+
    "\6\12\3\0\5\12\4\0\10\12\1\132\3\12\15\0"+
    "\2\12\1\0\6\12\54\0\1\133\105\0\1\134\6\0"+
    "\1\135\72\0\1\135\6\0\1\135\72\0\1\135\24\0"+
    "\7\12\2\0\1\12\1\0\4\12\1\136\1\12\3\0"+
    "\5\12\4\0\14\12\15\0\2\12\1\0\6\12\3\0"+
    "\7\12\2\0\1\12\1\0\6\12\3\0\3\12\1\137"+
    "\1\12\4\0\14\12\15\0\2\12\1\0\6\12\73\0"+
    "\1\140\21\0\1\141\2\0\1\61\6\0\4\61\1\0"+
    "\1\142\1\143\1\144\1\0\2\61\1\0\1\61\5\0"+
    "\3\61\66\0\1\145\52\0\1\146\1\0\1\146\1\0"+
    "\1\141\1\146\1\0\1\61\6\0\4\61\1\147\1\142"+
    "\1\143\1\144\1\0\2\61\1\0\1\61\5\0\3\61"+
    "\24\0\4\146\37\0\1\150\47\0\1\151\102\0\2\14"+
    "\1\0\1\14\2\0\1\14\60\0\5\14\6\0\2\105"+
    "\1\0\1\105\2\0\1\105\6\0\1\77\21\0\1\77"+
    "\27\0\5\105\22\0\1\152\65\0\2\153\1\0\1\153"+
    "\2\0\1\153\7\0\1\154\50\0\5\153\6\0\2\101"+
    "\1\0\1\101\2\0\1\101\60\0\5\101\5\0\1\100"+
    "\2\101\1\0\1\101\2\0\1\101\1\75\3\0\1\76"+
    "\1\0\1\77\21\0\1\77\27\0\5\101\11\0\1\155"+
    "\2\0\1\155\73\0\4\156\2\0\1\156\1\0\1\156"+
    "\4\0\1\156\4\0\1\156\10\0\2\156\2\0\1\156"+
    "\23\0\1\156\3\0\5\156\7\0\1\157\1\0\1\157"+
    "\2\0\1\157\61\0\4\157\5\0\1\160\2\105\1\0"+
    "\1\105\2\0\1\105\4\0\1\76\1\0\1\77\21\0"+
    "\1\77\27\0\5\105\15\0\1\161\67\0\7\12\2\0"+
    "\1\12\1\0\2\12\1\162\3\12\3\0\5\12\4\0"+
    "\14\12\15\0\2\12\1\0\6\12\3\0\7\12\2\0"+
    "\1\12\1\0\6\12\3\0\5\12\4\0\10\12\1\163"+
    "\3\12\15\0\2\12\1\0\6\12\3\0\7\12\2\0"+
    "\1\12\1\0\6\12\3\0\5\12\4\0\1\164\13\12"+
    "\15\0\2\12\1\0\6\12\3\0\7\12\2\0\1\12"+
    "\1\0\6\12\3\0\5\12\4\0\10\12\1\165\3\12"+
    "\15\0\2\12\1\0\6\12\2\114\1\166\77\114\3\0"+
    "\7\12\2\0\1\12\1\0\6\12\3\0\5\12\4\0"+
    "\7\12\1\111\4\12\15\0\2\12\1\0\6\12\3\0"+
    "\7\12\2\0\1\12\1\0\6\12\3\0\5\12\4\0"+
    "\12\12\1\167\1\12\15\0\2\12\1\0\6\12\3\0"+
    "\7\12\2\0\1\12\1\0\2\12\1\170\3\12\3\0"+
    "\5\12\4\0\14\12\15\0\2\12\1\0\6\12\3\0"+
    "\7\12\2\0\1\12\1\0\6\12\3\0\5\12\4\0"+
    "\11\12\1\171\2\12\15\0\2\12\1\0\6\12\36\0"+
    "\1\172\102\0\1\173\45\0\7\12\2\0\1\12\1\0"+
    "\6\12\3\0\5\12\4\0\2\12\1\174\11\12\15\0"+
    "\2\12\1\0\6\12\3\0\7\12\2\0\1\12\1\0"+
    "\6\12\3\0\5\12\4\0\14\12\15\0\1\175\1\12"+
    "\1\0\6\12\3\0\7\12\2\0\1\12\1\0\6\12"+
    "\3\0\5\12\4\0\11\12\1\176\2\12\15\0\2\12"+
    "\1\0\6\12\3\0\7\12\2\0\1\12\1\0\6\12"+
    "\3\0\5\12\4\0\6\12\1\175\5\12\15\0\2\12"+
    "\1\0\6\12\3\0\7\12\2\0\1\12\1\0\6\12"+
    "\3\0\3\12\1\177\1\12\4\0\14\12\15\0\2\12"+
    "\1\0\6\12\3\0\7\12\2\0\1\12\1\0\6\12"+
    "\3\0\5\12\4\0\6\12\1\200\3\12\1\201\1\12"+
    "\15\0\2\12\1\0\6\12\3\0\7\12\2\0\1\12"+
    "\1\0\6\12\3\0\5\12\4\0\10\12\1\111\1\202"+
    "\2\12\15\0\2\12\1\0\6\12\3\0\7\12\2\0"+
    "\1\12\1\0\6\12\3\0\5\12\4\0\7\12\1\203"+
    "\4\12\15\0\2\12\1\0\6\12\3\0\7\12\2\0"+
    "\1\12\1\0\6\12\3\0\1\175\4\12\4\0\14\12"+
    "\15\0\2\12\1\0\6\12\3\0\7\12\2\0\1\12"+
    "\1\0\2\12\1\175\3\12\3\0\5\12\4\0\14\12"+
    "\15\0\2\12\1\0\6\12\13\0\1\141\2\0\1\61"+
    "\6\0\4\61\5\0\2\61\1\0\1\61\5\0\3\61"+
    "\36\0\4\204\2\0\1\204\1\0\1\204\4\0\1\204"+
    "\4\0\1\204\10\0\2\204\2\0\1\204\23\0\1\204"+
    "\3\0\5\204\6\0\4\205\2\0\1\205\1\0\1\205"+
    "\4\0\1\205\4\0\1\205\10\0\2\205\2\0\1\205"+
    "\23\0\1\205\3\0\5\205\36\0\1\206\52\0\1\207"+
    "\1\0\1\207\2\0\1\207\61\0\4\207\6\0\4\210"+
    "\2\0\1\210\1\0\1\210\4\0\1\210\4\0\1\210"+
    "\10\0\2\210\2\0\1\210\23\0\1\210\3\0\5\210"+
    "\37\0\1\211\47\0\1\154\2\153\1\0\1\153\2\0"+
    "\1\153\60\0\5\153\6\0\2\153\1\0\1\153\2\0"+
    "\1\153\60\0\5\153\5\0\1\102\3\0\1\155\2\0"+
    "\1\155\72\0\1\103\4\156\2\0\1\156\1\0\1\156"+
    "\4\0\1\156\4\0\1\156\10\0\2\156\2\0\1\156"+
    "\23\0\1\156\3\0\5\156\5\0\1\104\1\0\1\157"+
    "\1\0\1\157\2\0\1\157\61\0\4\157\6\0\2\105"+
    "\1\0\1\105\2\0\1\105\60\0\5\105\3\0\7\12"+
    "\2\0\1\12\1\0\6\12\3\0\5\12\4\0\12\12"+
    "\1\202\1\12\15\0\2\12\1\0\6\12\3\0\7\12"+
    "\2\0\1\12\1\0\6\12\3\0\5\12\4\0\5\12"+
    "\1\212\6\12\15\0\2\12\1\0\6\12\3\0\7\12"+
    "\2\0\1\12\1\0\2\12\1\213\3\12\3\0\5\12"+
    "\4\0\14\12\15\0\2\12\1\0\6\12\3\0\6\12"+
    "\1\214\2\0\1\12\1\0\6\12\3\0\5\12\4\0"+
    "\14\12\15\0\2\12\1\0\1\12\1\202\1\215\1\216"+
    "\2\12\3\0\7\12\2\0\1\12\1\0\6\12\3\0"+
    "\5\12\4\0\13\12\1\177\15\0\2\12\1\0\6\12"+
    "\3\0\7\12\2\0\1\12\1\0\6\12\3\0\5\12"+
    "\4\0\1\12\1\217\12\12\15\0\2\12\1\0\6\12"+
    "\2\0\1\220\101\0\1\221\102\0\7\12\2\0\1\12"+
    "\1\0\6\12\3\0\5\12\4\0\3\12\1\222\10\12"+
    "\15\0\2\12\1\0\6\12\3\0\7\12\2\0\1\12"+
    "\1\0\6\12\3\0\5\12\4\0\5\12\1\202\6\12"+
    "\15\0\2\12\1\0\6\12\3\0\7\12\2\0\1\12"+
    "\1\0\6\12\3\0\5\12\4\0\5\12\1\223\6\12"+
    "\15\0\2\12\1\0\6\12\3\0\7\12\2\0\1\12"+
    "\1\0\1\224\5\12\3\0\5\12\4\0\14\12\15\0"+
    "\2\12\1\0\6\12\3\0\7\12\2\0\1\12\1\0"+
    "\6\12\3\0\5\12\4\0\12\12\1\225\1\12\15\0"+
    "\2\12\1\0\6\12\3\0\7\12\2\0\1\12\1\0"+
    "\4\12\1\226\1\12\3\0\5\12\4\0\14\12\15\0"+
    "\2\12\1\0\6\12\6\0\4\227\2\0\1\227\1\0"+
    "\1\227\4\0\1\227\4\0\1\227\10\0\2\227\2\0"+
    "\1\227\23\0\1\227\3\0\5\227\6\0\4\230\2\0"+
    "\1\230\1\0\1\230\4\0\1\230\4\0\1\230\10\0"+
    "\2\230\2\0\1\230\23\0\1\230\3\0\5\230\7\0"+
    "\1\231\1\0\1\231\2\0\1\231\61\0\4\231\6\0"+
    "\4\231\2\0\1\231\1\0\1\231\4\0\1\231\4\0"+
    "\1\231\10\0\2\231\2\0\1\231\23\0\1\231\3\0"+
    "\5\231\3\0\7\12\2\0\1\12\1\0\6\12\3\0"+
    "\5\12\4\0\13\12\1\202\15\0\2\12\1\0\6\12"+
    "\3\0\7\12\2\0\1\12\1\0\6\12\3\0\5\12"+
    "\4\0\7\12\1\232\4\12\15\0\2\12\1\0\6\12"+
    "\3\0\7\12\2\0\1\12\1\0\6\12\3\0\5\12"+
    "\4\0\14\12\15\0\2\12\1\0\2\12\1\202\1\12"+
    "\1\233\1\12\3\0\7\12\2\0\1\12\1\0\6\12"+
    "\3\0\5\12\4\0\14\12\15\0\2\12\1\0\5\12"+
    "\1\202\3\0\7\12\2\0\1\12\1\0\6\12\3\0"+
    "\5\12\4\0\14\12\15\0\2\12\1\0\4\12\1\202"+
    "\1\12\3\0\7\12\2\0\1\12\1\0\6\12\3\0"+
    "\5\12\4\0\10\12\1\234\3\12\15\0\2\12\1\0"+
    "\6\12\3\0\7\12\2\0\1\12\1\0\6\12\3\0"+
    "\5\12\4\0\1\12\1\235\12\12\15\0\2\12\1\0"+
    "\6\12\3\0\7\12\2\0\1\12\1\0\6\12\3\0"+
    "\5\12\4\0\5\12\1\236\6\12\15\0\2\12\1\0"+
    "\6\12\3\0\7\12\2\0\1\12\1\0\6\12\3\0"+
    "\5\12\4\0\11\12\1\237\2\12\15\0\2\12\1\0"+
    "\6\12\6\0\4\240\2\0\1\240\1\0\1\240\4\0"+
    "\1\240\4\0\1\240\10\0\2\240\2\0\1\240\23\0"+
    "\1\240\3\0\5\240\6\0\4\241\2\0\1\241\1\0"+
    "\1\241\4\0\1\241\4\0\1\241\10\0\2\241\2\0"+
    "\1\241\23\0\1\241\3\0\5\241\3\0\7\12\2\0"+
    "\1\12\1\0\6\12\3\0\5\12\4\0\10\12\1\111"+
    "\3\12\15\0\2\12\1\0\6\12\3\0\7\12\2\0"+
    "\1\12\1\0\6\12\3\0\5\12\4\0\14\12\15\0"+
    "\2\12\1\0\1\12\1\202\4\12\3\0\7\12\2\0"+
    "\1\12\1\0\6\12\3\0\5\12\4\0\14\12\15\0"+
    "\2\12\1\0\2\12\1\215\1\216\2\12\3\0\7\12"+
    "\2\0\1\12\1\0\6\12\3\0\5\12\4\0\4\12"+
    "\1\242\7\12\15\0\2\12\1\0\6\12\3\0\7\12"+
    "\2\0\1\12\1\0\6\12\3\0\5\12\4\0\7\12"+
    "\1\202\4\12\15\0\2\12\1\0\6\12\3\0\7\12"+
    "\2\0\1\12\1\0\6\12\3\0\5\12\4\0\4\12"+
    "\1\202\7\12\15\0\2\12\1\0\6\12\6\0\4\61"+
    "\2\0\1\61\1\0\1\61\4\0\1\61\4\0\1\61"+
    "\10\0\2\61\2\0\1\61\23\0\1\61\3\0\5\61"+
    "\6\0\4\142\2\0\1\142\1\0\1\142\4\0\1\142"+
    "\4\0\1\142\10\0\2\142\2\0\1\142\23\0\1\142"+
    "\3\0\5\142\3\0\7\12\2\0\1\12\1\0\6\12"+
    "\3\0\5\12\4\0\5\12\1\111\6\12\15\0\2\12"+
    "\1\0\6\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8052];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\3\11\3\1\1\11\5\1\1\11\3\1\2\11"+
    "\12\1\3\11\1\1\4\11\2\1\1\11\3\1\1\11"+
    "\1\1\2\11\2\1\1\11\1\1\1\11\3\0\2\1"+
    "\6\0\1\1\1\0\12\1\2\0\10\1\3\11\2\1"+
    "\1\11\3\0\1\11\4\0\2\11\1\1\1\0\3\1"+
    "\1\0\1\11\4\1\1\11\3\1\2\0\10\1\2\0"+
    "\1\11\2\0\1\11\6\1\2\11\5\1\2\0\1\11"+
    "\6\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CueLexer() {
    this((java.io.Reader)null);
  }

  private final IntStack stateStack = new IntStack(100);

  private void pushState(int state) {
      int currentState = yystate();
      if (currentState == YYINITIAL && !stateStack.empty()) {
          throw new IllegalStateException("Can't push initial state into the not empty stack");
      }
      stateStack.push(currentState);
      yybegin(state);
  }

  private void popState() {
    assert !stateStack.empty() : "States stack is empty";
    yybegin(stateStack.pop());
  }

  /** Called when an instance is reset, e.g. on incremental lexer restart */
  protected void onReset() {
    stateStack.clear();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CueLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 3: 
            { return WHITE_SPACE_NEWLINE;
            } 
            // fall through
          case 50: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return INT_LIT;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return COMMA;
            } 
            // fall through
          case 53: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 54: break;
          case 8: 
            { return ADD_OP;
            } 
            // fall through
          case 55: break;
          case 9: 
            { return MUL_OP;
            } 
            // fall through
          case 56: break;
          case 10: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 58: break;
          case 12: 
            { pushState(STRING_LITERAL); return DOUBLE_QUOTE;
            } 
            // fall through
          case 59: break;
          case 13: 
            { pushState(BYTE_LITERAL); return SINGLE_QUOTE;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return OP_DISJUNCTION;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return LEFT_CURLY;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return RIGHT_CURLY;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return COLON;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return EQ;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return QMARK;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return AT;
            } 
            // fall through
          case 67: break;
          case 21: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 68: break;
          case 22: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 69: break;
          case 23: 
            { return EXCL;
            } 
            // fall through
          case 70: break;
          case 24: 
            { return REL_OP;
            } 
            // fall through
          case 71: break;
          case 25: 
            { return OP_UNIFICATION;
            } 
            // fall through
          case 72: break;
          case 26: 
            { return UNICODE_VALUE;
            } 
            // fall through
          case 73: break;
          case 27: 
            { popState(); return DOUBLE_QUOTE_END;
            } 
            // fall through
          case 74: break;
          case 28: 
            { return NEWLINE;
            } 
            // fall through
          case 75: break;
          case 29: 
            { popState(); return SINGLE_QUOTE_END;
            } 
            // fall through
          case 76: break;
          case 30: 
            { popState(); return INTERPOLATION_END;
            } 
            // fall through
          case 77: break;
          case 31: 
            { return FLOAT_LIT;
            } 
            // fall through
          case 78: break;
          case 32: 
            { return KEYWORD;
            } 
            // fall through
          case 79: break;
          case 33: 
            { return COMMENT;
            } 
            // fall through
          case 80: break;
          case 34: 
            { return OP_OR;
            } 
            // fall through
          case 81: break;
          case 35: 
            { return OP_EQ;
            } 
            // fall through
          case 82: break;
          case 36: 
            { return OP_AND;
            } 
            // fall through
          case 83: break;
          case 37: 
            { pushState(INTERPOLATION); return INTERPOLATION_START;
            } 
            // fall through
          case 84: break;
          case 38: 
            { return BOTTOM_LIT;
            } 
            // fall through
          case 85: break;
          case 39: 
            { return ELLIPSIS_TOKEN;
            } 
            // fall through
          case 86: break;
          case 40: 
            { return IDENTIFIER_PREDECLARED;
            } 
            // fall through
          case 87: break;
          case 41: 
            { popState(); return MULTILINE_STRING_END;
            } 
            // fall through
          case 88: break;
          case 42: 
            { popState(); return MULTILINE_BYTES_END;
            } 
            // fall through
          case 89: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { pushState(STRING_MULTILINE); return MULTILINE_STRING_START;
            } 
            // fall through
          case 90: break;
          case 44: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { pushState(BYTES_MULTILINE); return MULTILINE_BYTES_START;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return BOOL_LIT;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return NULL_LIT;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return BYTE_VALUE;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
